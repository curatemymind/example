{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["itemsArr","App","state","resources","dataFields","categories","data","self","this","tempResources","tempDataFields","tempCategories","tempData","path","fetch","then","res","json","i","length","push","setState","settings","dots","infinite","speed","fade","slidesToShow","slidesToScroll","arrows","className","item","j","splitString","String","split","splitArr","k","style","marginLeft","width","map","itemData","index","src","href","videoLink","index2","video","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uTASMA,G,kBAAW,IAgIFC,E,kDA1Hb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,UAAW,KACXC,WAAY,KACZC,WAAY,GACZC,KAAM,MANI,E,gEAaZ,IAAIC,EAAOC,KAEPC,EAAgB,EAChBC,EAAiB,EACjBC,EAAiB,GACjBC,EAAW,GACXC,EAAO,KAEXC,MAAM,mHAAmHC,MAAK,SAAAC,GAAG,OACjIA,EAAIC,UAAQF,MAAK,SAAAT,GAGbI,EAAiBJ,EAAI,KAAJ,eACjBG,EAAgBH,EAAI,KAAJ,eAAoC,EACpDO,EAAOP,EAAI,KAAJ,MAGP,IAAI,IAAIY,EAAIR,EAAgBQ,EAAIL,EAAKM,OAAQD,IAE3CN,EAASQ,KAAKP,EAAKK,GAAL,oBAIlBX,EAAKc,SAAS,CAAClB,UAAWM,EAAeL,WAAYM,EAAgBL,WAAYM,EAAgBL,KAAMM,S,+BAYzG,IAAIU,EAAW,CAEbC,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,MAAM,EACNC,aAAc,EACdC,eAAgB,EAChBC,QAAQ,EACRC,UAAW,UAIb,GAAsB,MAAnBtB,KAAKN,MAAMI,KAEZ,IAAI,IAAIY,EAAI,EAAGA,EAAIV,KAAKN,MAAMI,KAAKa,OAAQD,GAAG,EAC9C,CAEE,IADA,IAAMa,EAAO,GACLC,EAAI,EAAGA,EAAIxB,KAAKN,MAAME,WAAY4B,IAExC,GAAS,IAANA,EACH,CAIE,IAHA,IAAIC,EAAeC,OAAQ1B,KAAKN,MAAMI,KAAKY,EAAIc,IAAKG,MAAM,MACtDC,EAAW,GAEPC,EAAI,EAAGA,EAAIJ,EAAYd,OAAQkB,IAErCD,EAAShB,KAAKa,EAAYI,IAE5BN,EAAKX,KAAKgB,QAIVL,EAAKX,KAAKZ,KAAKN,MAAMI,KAAKY,EAAIc,IAKlChC,EAASoB,KAAKW,GAIlB,OACE,6BACE,yBAAKO,MAAO,CAACC,WAAY,GAAIC,MAAO,MAElC,6BACCxC,EAASyC,KAAI,SAACC,EAAUC,GAAX,OAAqB,6BACjC,4BAAKD,EAAS,IACd,yBAAKE,IAAKF,EAAS,GAAIJ,MAAO,CAACE,MAAO,OACtC,4BAAKE,EAAS,IACd,kCAAQA,EAAS,IACjB,2BAAIA,EAAS,IACb,uBAAGG,KAAMH,EAAS,IAAlB,sBAIA,uCACA,kBAAC,IAAWpB,EACRtB,EAAS2C,GAAO,GAAIF,KAAI,SAACK,EAAWC,GAAZ,OAC1B,yBAAKT,MAAO,CAACE,MAAO,MAClB,gCAAQ,kBAAC,IAAD,CACRQ,MAAOF,oB,GAjHLG,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ae761f2a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css'\nimport Vimeo from '@u-wave/react-vimeo';\nimport Slider from \"react-slick\";\n// Import css files\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport './slides.scss'; \n\nconst itemsArr = [];\n\n\nclass App extends React.Component { \n  \n  //the states of emotion and source will be set to null initially until the user had filled out the form.\n  constructor() {\n    super();\n    this.state = {\n      resources: null,\n      dataFields: null,\n      categories: [],\n      data: null,\n      \n    };\n  }\n\n  componentDidMount()\n  {\n    let self = this;\n    var tempRows = [];\n    var tempResources = 0;\n    var tempDataFields = 0;\n    var tempCategories = [];\n    var tempData = [];\n    var path = null;\n\n    fetch('https://spreadsheets.google.com/feeds/cells/1ncWZJvETrF-Y66BT6vpTupUdROtbyAxfqHEDNIiMG48/1/public/full?alt=json').then(res => \n    res.json()).then(data => {\n      {\n        \n        tempDataFields = data['feed']['gs$colCount']['$t'];\n        tempResources = data['feed']['gs$rowCount']['$t'] - 1;\n        path = data['feed']['entry']\n        \n        \n        for(var i = tempDataFields; i < path.length; i++)\n        {\n          tempData.push(path[i]['gs$cell']['inputValue'])\n        }\n\n      }\n      self.setState({resources: tempResources, dataFields: tempDataFields, categories: tempCategories, data: tempData})\n      \n\n      \n    })\n    \n  }\n\n \n\n  render()\n  {  \n    var settings = {\n    \n      dots: false,\n      infinite: false,\n      speed: 500,\n      fade: false,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      arrows: true,\n      className: \"slides\", \n     \n    };\n\n    if(this.state.data != null)\n    {\n      for(var i = 0; i < this.state.data.length; i+=9)\n      {\n        const item = [];\n        for(var j = 0; j < this.state.dataFields; j++)\n        {\n          if(j === 7)\n          {\n            var splitString = (String((this.state.data[i + j])).split(', '))\n            var splitArr = [];\n           \n            for(var k = 0; k < splitString.length; k++)\n            {\n              splitArr.push(splitString[k]);\n            }\n            item.push(splitArr)\n          }\n          else\n          {\n            item.push(this.state.data[i + j])\n          }\n          \n\n        }\n        itemsArr.push(item)\n      }\n    }\n    \n    return (\n      <div >\n        <div style={{marginLeft: 20, width: 550}}>  \n\n          <br></br>\n          {itemsArr.map((itemData, index) => <div>\n            <h1>{itemData[1]}</h1>\n            <img src={itemData[2]} style={{width: 200}}></img>\n            <h2>{itemData[3]}</h2>\n            <h3>by {itemData[4]}</h3>\n            <p>{itemData[5]}</p>\n            <a href={itemData[6]}>Download Work File</a>\n            {/*itemdata[7].map((videoLink, index2) => {\n              \n            })*/}\n            <h3>Videos:</h3>\n            <Slider {...settings}>\n              {(itemsArr[index][7]).map((videoLink, index2) => \n              <div style={{width: 400}}>\n                <center><Vimeo\n                video={videoLink}/></center>\n              </div>)}\n            </Slider>\n            \n          </div>)}\n       \n        </div>\n      </div>\n    )              \n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}